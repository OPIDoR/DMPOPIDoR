# frozen_string_literal: true

require 'csv'
require 'json'

# DMPRoadmap constants
#
# This file is a consolidation of the old custom configuration previously spread
# across the application.rb, branding.yml and the contact_us, devise, recaptcha,
# constants and wicked_pdf initializers
#
# It works in conjunction with the new Rails 5 config/credentials.yml.enc file
# for information on how to use the credentials file see:
#    https://medium.com/cedarcode/rails-5-2-credentials-9b3324851336
#
# This file's name begins with an underscore so that it is processed first and its
# values are available to all other initializers within this directory!
module DMPRoadmap
  # Base configuration for the DMPRoadmap system
  class Application < Rails::Application
    # --------------------- #
    # ORGANISATION SETTINGS #
    # --------------------- #

    # Your organisation name, used in various places throught the application
    config.x.organisation.name = ENV.fetch('ORGANISATION_NAME',
                                           'Inist-CNRS Institut de l\'Information Scientifique et Technique')
    # Your organisation's abbreviation
    config.x.organisation.abbreviation = ENV.fetch('ORGANISATION_ABBREVIATION', 'Inist-CNRS')
    # Your organisation's homepage, used in some of the public facing pages
    config.x.organisation.url = ENV.fetch('ORGANISATION_URL', 'http://www.inist.fr/')
    # Your organisation's legal (official) name - used in the copyright portion of the footer
    config.x.organisation.copywrite_name = ENV.fetch('ORGANISATION_COPYWRITE_NAME', 'CNRS')
    # This email is used as the 'from' address for emails generated by the application
    config.x.organisation.email = ENV.fetch('ORGANISATION_EMAIL', 'dmp.opidor@inist.fr')
    # This email is displayed in public views, a <span> is inserted to prevent bots from using it
    config.x.organisation.safe_email = ENV.fetch('ORGANISATION_SAFE_EMAIL',
                                                 'dmp.opidor<span style="display: none;">REMOVE</span>@inist.fr')
    # This email is used as the 'from' address for the feedback_complete email to users
    # config.x.organisation.do_not_reply_email "do-not-reply@cc_curation_centre.org"
    # This email is used in email communications
    config.x.organisation.helpdesk_email = ENV.fetch('ORGANISATION_HELPDESK_EMAIL', 'dmp.opidor@inist.fr')
    # Your organisation's telephone number - used on the contact us page
    # config.x.organisation.telephone = "+1-123-123-1234"
    # Your organisation's address - used on the contact us page
    # rubocop:disable Naming/VariableNumber
    config.x.organisation.address = JSON.parse(ENV.fetch('ORGANISATION_ADDRESS', {
      line_1: 'Equipe Valorisation Données de la recherche',
      line_2: '2, rue Jean Zay',
      line_3: '54519 Vandoeuvre-lès-Nancy',
      # line_4: "Polar Vortex, ABC-345",
      country: 'FRANCE'
    }.to_json), symbolize_names: true)
    # rubocop:enable Naming/VariableNumber

    # The Google maps link to your organisation's location - used to display the
    # Google map on the contact us page.
    # To find your organisation's Google maps URL, open maps.google.com, search for
    # your orgnaisation and then click the menu link to the left of the search box,
    # once the menu opens, click the 'share or embed' link and the 'embed' tab on
    # the dialog window that opens. DO NOT place the entire <iframe> tag below, just
    # the address!
    config.x.organisation.google_maps_link = ENV.fetch('ORGANISATION_GOOGLE_MAPS_LINK', 'https://www.openstreetmap.org/export/embed.html?bbox=6.141743659973145%2C48.65246743623988%2C6.155905723571778%2C48.658775124887654&layer=mapnik&marker=48.655621379213805%2C6.148824691772461')

    # Uncomment the following line if you want to redirect your users to an
    # organisational contact/help page instead of using the built-in contact_us form
    # config.x.organisation.contact_us_url = "https://example.org/contact

    # -------------------- #
    # APPLICATION SETTINGS #
    # -------------------- #

    # Used throughout the system via ApplicationService.application_name
    config.x.application.name = ENV.fetch('APPLICATION_NAME', 'DMP OPIDoR')

    # App version, displayed in the footer
    config.x.application.version = ENV.fetch('DMP_VERSION', 'V4.1.0')

    # App Github URL, displayed in the footer
    config.x.application.url = ENV.fetch('APPLICATION_URL', 'https://github.com/OPIDoR/DMPOPIDoR')
    config.x.application.release_notes_url = ENV.fetch('APPLICATION_RELEASE_NOTES_URL', 'https://github.com/OPIDoR/DMPOPIDoR/wiki/Releases')
    config.x.application.issue_list_url = ENV.fetch('APPLICATION_ISSUE_LIST_URL', 'https://github.com/OPIDoR/DMPOPIDoR/issues')
    # App user group URL, displayed in the footer
    config.x.application.user_group_subscription_url = ENV.fetch('APPLICATION_USER_GROUP_SUBSCRIPTION_LIST', 'https://listes.services.cnrs.fr/wws/info/dmpopidor')
    # App Twitter URL, displayed in the footer
    config.x.application.twitter_url = ENV.fetch('APPLICATION_TWITTER_URL', 'https://twitter.com/OPIDoR_INIST')
    # Link to the org_admin doc
    config.x.application.admin_doc = ENV.fetch('APPLICATION_ADMIN_DOC', 'https://github.com/OPIDoR/DMPOPIDoR/wiki/Guide-Administrateur')
    # Used as the default domain when 'archiving' (aka anonymizing) a user account
    # for example `jane.doe@uni.edu` becomes `1234@removed_accounts-example.org`
    config.x.application.archived_accounts_email_suffix = ENV.fetch('APPLICATION_ARCHIVED_ACCOUNTS_EMAIL_SUFFIX',
                                                                    '@removed_accounts-opidor.fr')
    # Available CSV separators, the default is ','
    csv_separators = ENV.fetch('APPLICATON_CSV_SEPARATORS', [',', '|', '#'])
    csv_separators = csv_separators.split unless csv_separators.is_a?(Array)
    config.x.application.csv_separators = csv_separators
    # The largest page size allowed in requests to the API (all versions)
    config.x.application.api_max_page_size = ENV.fetch('APPLICATION_API_MAX_PAGE_SIZE', 100)
    # The link to the API documentation - used in emails about the API
    config.x.application.api_documentation_urls = JSON.parse(ENV.fetch('APPLICATION_API_DOCUMENTATIONS_URLS', {
      v0: 'https://github.com/DMPRoadmap/roadmap/wiki/API-V0-Documentation',
      v1: 'https://github.com/OPIDoR/DMPOPIDoR/wiki/API-DMP-OPIDoR'
    }.to_json), symbolize_names: true)
    # The links that appear on the home page. Add any number of links
    # config.x.application.welcome_links = [
    #   {
    #     title: "Digital Curation Centre",
    #     url: "https://dcc.ac.uk/"
    #   }, {
    #     title: "UC3: University of California Curation Center",
    #     url: "https://www.cdlib.org/uc3/"
    #   }, {
    #     title: "UK funder requirements for Data Management Plans",
    #     url: "http://www.dcc.ac.uk/resources/data-management-plans/funders-requirements"
    #   }, {
    #     title: "US funder requirements for Data Management Plans",
    #     url: "https://dmptool.org/guidance"
    #   }, {
    #     title: "DCC Checklist for a Data Management Plan",
    #     url: "https://dmponline.dcc.ac.uk/files/DMP_Checklist_2013.pdf"
    #   }
    # ]
    # The default user email preferences used when a new account is created
    config.x.application.preferences = JSON.parse(ENV.fetch('APPLICATION_PREFERENCES', {
      email: {
        users: {
          new_comment: true,
          admin_privileges: true,
          added_as_coowner: true,
          feedback_requested: true,
          feedback_provided: true
        },
        owners_and_coowners: {
          visibility_changed: true
        },
        admins: {
          feedback_requested: true
        }
      }
    }.to_json), symbolize_names: true)

    # Setting to only take orgs from local and not allow on-the-fly creation
    config.x.application.restrict_orgs = ENV.fetch('APPLICATION_RESTRICT_ORGS', true).to_s.casecmp('true').zero?

    # Defines if Guidances/Comments in toggleable & if it's opened by default
    config.x.application.guidance_comments_toggleable = ENV.fetch('APPLICATION_GUIDANCE_COMMENTS_TOGGLEABLE',
                                                                  true).to_s.casecmp('true').zero?
    config.x.application.guidance_comments_opened_by_default = ENV.fetch(
      'APPLICATION_GUIDANCE_COMMENTS_OPENED_BY_DEFAULT', false
    ).to_s.casecmp('true').zero?

    # ------------------- #
    # SHIBBOLETH SETTINGS #
    # ------------------- #

    # Enable shibboleth as an alternative authentication method
    # Requires server configuration and omniauth shibboleth provider configuration
    # See config/initializers/devise.rb
    config.x.shibboleth.enabled = ENV.fetch('ENABLE_SHIBBOLETH', false).to_s.casecmp('true').zero?

    # Relative path to Shibboleth SSO Logouts
    config.x.shibboleth.login_url = ENV.fetch('SHIBBOLETH_LOGIN_URL', '/Shibboleth.sso/Login')
    config.x.shibboleth.logout_url = ENV.fetch('SHIBBOLETH_LOGOUT_URL', '/Shibboleth.sso/Logout?return=')

    # If this value is set to true your users will be presented with a list of orgs that have a
    # shibboleth identifier in the orgs_identifiers table. If it is set to false (default), the user
    # will be driven out to your federation's discovery service
    #
    # A super admin will also be able to associate orgs with their shibboleth entityIds if this is set to true
    config.x.shibboleth.use_filtered_discovery_service = ENV.fetch('SHIBBOLETH_USE_FILTERED_DISCOVERY_SERVICE',
                                                                   false).to_s.casecmp('true').zero?

    # ------- #
    # LOCALES #
    # ------- #

    # The default locale (use the i18n format!)
    config.x.locales.default = ENV.fetch('LOCALES_DEFAULT', 'fr-FR')
    # The character that separates a locale's ISO code for i18n. (e.g. `en-GB` or `en`)
    # Changing this value is not recommended!
    config.x.locales.i18n_join_character = ENV.fetch('LOCALES_I18N_JOIN_CHARACTER', '-')
    # The character that separates a locale's ISO code for Gettext. (e.g. `en_GB` or `en`)
    # Changing this value is not recommended!
    config.x.locales.gettext_join_character = ENV.fetch('LOCALES_GETTEXT_JOINT_CHARACTER', '_')

    # ---------- #
    # THRESHOLDS #
    # ---------- #

    # Determines the number of links a funder is allowed to add to their template
    config.x.max_number_links_funder = ENV.fetch('MAX_NUMBER_LINKS_FUNDER', 5)&.to_i
    # Determines the number of links a funder can add for sample plans for their template
    config.x.max_number_links_sample_plan = ENV.fetch('MAX_NUMBER_SAMPLE_PLAN', 5)&.to_i
    # Determines the maximum number of themes to display per column when an org admin
    # updates a template question or guidance
    config.x.max_number_themes_per_column = ENV.fetch('MAX_NUMBER_THEMES_PER_COLUMN', 5)&.to_i
    # default results per page
    config.x.results_per_page = ENV.fetch('RESULTS_PER_PAGE', 10)&.to_i

    # ------------- #
    # PLAN DEFAULTS #
    # ------------- #

    # The default visibility a plan receives when it is created.
    # options: 'privately_visible', 'organisationally_visible' and 'publicly_visibile'
    config.x.plans.default_visibility = ENV.fetch('PLANS_DEFAULT_VISIBLITY', 'privately_visible')

    # The percentage of answers that have been filled out that determine if a plan
    # will be marked as complete. Plan completion has implications on whether or
    # not plan visibility settings are editable by the user and whether or not the
    # plan can be submitted for feedback
    config.x.plans.default_percentage_answered = ENV.fetch('PLANS_DEFAULT_PERCENTAGE_ANSWERED', 0)&.to_i

    # Whether or not Super adminis can read all of the user's plans regardless of
    # the plans visibility and whether or not the plan has been shared
    config.x.plans.org_admins_read_all = ENV.fetch('PLANS_ORG_ADMIN_READ_ALL', true).to_s.casecmp('true').zero?
    # Whether or not Organisational administrators can read all of the user's plans
    # regardless of the plans visibility and whether or not the plan has been shared
    config.x.plans.super_admins_read_all = ENV.fetch('PLANS_SUPER_ADMINS_READ_ALL', true).to_s.casecmp('true').zero?

    # Check download of a plan coversheet tickbox
    config.x.plans.download_coversheet_tickbox_checked = ENV.fetch('PLANS_DOWNLOAD_COVERSHEET_TICKBOX_CHECKED',
                                                                   false).to_s.casecmp('true').zero?

    # ---------------------------------------------------- #
    # CACHING - all values are in seconds (86400 == 1 Day) #
    # ---------------------------------------------------- #

    # Determines how long to cache results for OrgSelection::SearchService
    config.x.cache.org_selection_expiration = ENV.fetch('CACHE_ORG_SELECTION_EXPIRATION', 86_400)&.to_i
    # Determines how long to cache results for the ResearchProjectsController
    config.x.cache.research_projects_expiration = ENV.fetch('CACHE_RESEARCH_PROJECTS_EXPIRATION', 86_400)&.to_i

    # ---------------- #
    # Google Analytics #
    # ---------------- #
    # this is the abbreviation for the installation's root org as set in the org table
    config.x.google_analytics.tracker_root = ENV.fetch('GOOGLE_ANALYTICS_TRACKET_ROOT', '')

    # ------------------------------------------------------------------------ #
    # reCAPTCHA - recaptcha appears on the create account and contact us forms #
    # ------------------------------------------------------------------------ #
    config.x.recaptcha.enabled = ENV.fetch('RECAPTCHA_ENABLED', true).to_s.casecmp('true').zero?

    # --------------------------------------------------- #
    # Machine Actionable / Networked DMP Features (maDMP) #
    # --------------------------------------------------- #
    # Enable/disable functionality on the Project Details tab
    config.x.madmp.enable_ethical_issues = ENV.fetch('MADMP_ENABLE_ETHICAL_ISSUES', true).to_s.casecmp('true').zero?

    # The following flags will allow the system to include the question and answer in the JSON output
    #   - questions with a theme equal to 'Preservation'
    config.x.madmp.extract_preservation_statements_from_themed_questions = ENV.fetch(
      'MADMP_EXTRACT_PRESERVATION_STATEMENTS_FROM_THEMED_QUESTIONS', false
    ).to_s.casecmp('true').zero?
    #   - questions with a theme equal to 'Data Collection'
    config.x.madmp.extract_data_quality_statements_from_themed_questions = ENV.fetch(
      'MADMP_EXTRACT_DATA_QUALITY_STATEMENTS_FROM_THEMED_QUESTIONS', false
    ).to_s.casecmp('true').zero?
    #   - questions with a theme equal to 'Ethics & privacy' or 'Storage & security'
    config.x.madmp.extract_security_privacy_statements_from_themed_questions = ENV.fetch(
      'MADMP_EXTRACT_SECURITY_PRIVACY_STATEMENTS_FROM_THEMED_QUESTIONS', false
    ).to_s.casecmp('true').zero?

    # Specify a list of the preferred licenses types. These licenses will appear in a select
    # box on the 'Research Outputs' tab when editing a plan along with the option to select
    # 'other'. When 'other' is selected, the user is presented with the full list of licenses.
    #
    # The licenses will appear in the order you specify here.
    #
    # Note that the values you enter must match the :identifier field of the licenses table.
    # You can use the `%{latest}` markup in place of version numbers if desired.
    config.x.madmp.preferred_licenses = JSON.parse(ENV.fetch('MADMP_PREFERRED_LICENSES', [
      'CC-BY-%{latest}',
      'CC-BY-SA-%{latest}',
      'CC-BY-NC-%{latest}',
      'CC-BY-NC-SA-%{latest}',
      'CC-BY-ND-%{latest}',
      'CC-BY-NC-ND-%{latest}',
      'CC0-%{latest}'
    ].to_json), symbolize_names: true)
    # Link to external guidance about selecting one of the preferred licenses. A default
    # URL will be displayed if none is provided here. See app/views/research_outputs/licenses/_form
    config.x.madmp.preferred_licenses_guidance_url = ENV.fetch('MADMP_PREFERRED_LICENSES_GUIDANCE_URL', 'https://creativecommons.org/about/cclicenses/')

    # --------------------------------------------------- #
    # DMP OPIDoR Features #
    # --------------------------------------------------- #
    config.x.dmpopidor.front = {}
    config.x.directus.url = ENV.fetch('DIRECTUS_URL', 'http://directus:8055')
    config.x.directus.public_url = ENV.fetch('DIRECTUS_PUBLIC_URL', 'http://localhost:8080/directus')
    config.x.dmpopidor.redis_url = ENV.fetch('REDIS_URL', 'redis://default:changeme@localhost:6379/1')
    config.x.application.canalu_url = ENV.fetch('CANALU_URL', 'https://www.canal-u.tv/chaines/inist-cnrs/opidor')
  end
end
